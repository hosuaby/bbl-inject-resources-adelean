doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title BBL - @InjectResources - Adelean

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article.deck

      section
        h1 BBL - @InjectResources - Adelean
        <a href="https://github.com/hosuaby/inject-resources">github.com/hosuaby/inject-resources</a>

      section
        h3 Importer le contenu d'une ressource en Java est plus compliqué que ça ne devrais être.

      section
        h2 Lécture d'une ressource (Java pure)
        font(size="-1")
          pre
            code.language-java.
              String resourcePath = "com/adelean/junit/jupiter/resource.txt";
              ClassLoader classLoader = getClass().getClassLoader();
              
              StringBuilder textBuilder = new StringBuilder();
              
              try (InputStream resourceAsStream = classLoader.getResourceAsStream(resourcePath);
                   InputStreamReader streamReader = new InputStreamReader(resourceAsStream);
                   BufferedReader bufferedReader = new BufferedReader(streamReader)) {
                  int c = 0;
                  while ((c = bufferedReader.read()) != -1) {
                      textBuilder.append((char) c);
                  }
              } catch (IOException ioException) {
                  // handle exception
              }
              
              String resourceContent = textBuilder.toString();
              // resourceContent == "The quick brown fox jumps over the lazy dog."

      section
        h2 Lécture d'une ressource (Guava)
        font(size="-1")
          pre
            code.language-java.
              URL url = Resources.getResource("com/adelean/junit/jupiter/resource.txt");
              try {
                  String resourceContent = Resources.toString(url, StandardCharsets.UTF_8);
              } catch (IOException ioException) {
                  // handle exception
              }

      section
        ul.build.build-items
          li Ressource ≠ fichier
          li Ressource ≈ import

      section
        h3 Vous ne faitez pas ça, n'est ce pas ?
        font(size="-1")
          pre
            code.language-java.
              try {
                  import java.util.ArrayList;
              } catch (IOException ioException) {
                  // handle exception
              }

      section
        h3 Peut-on faire plus simple ?
        
      section
        h4 Avec @InjectResources
        p Contenu de <strong>/com/adelean/junit/jupiter/resource.txt</strong>:
        font(size="-1")
          pre
            code.language-text.
              The quick brown fox jumps over the lazy dog.
        font(size="-1")
          pre
            code.language-java.
              @TestWithResources  // <-- ajouter l'extention
              class InjectTextResourcesTests {
              
                  @GivenTextResource("/com/adelean/junit/jupiter/resource.txt")
                  String resourceContent;   // <-- injecter le contenu de la resource
              
                  @Test
                  public void testInjectTextIntoStringInstanceField() {
                      assertThat(resourceContent)
                              .isEqualTo("The quick brown fox jumps over the lazy dog.");
                  }
              }
              
      section
        p Contenu de <strong>/com/adelean/junit/jupiter/fibonacci.bin</strong> (binaire):
        font(size="-1")
          pre
            code.language-text.
              1 1 2 3 5 8 13 21 34 55 89
        font(size="-1")
          pre
            code.language-java.
              @TestWithResources
              class InjectBinaryResourcesTests {
              
                  @GivenBinaryResource("/com/adelean/junit/jupiter/fibonacci.bin")
                  byte[] fibonacci;
              
                  @Test
                  public void testInjectBinaryContentIntoByteArrayInstanceField() {
                      assertThat(fibonacci)
                              .contains(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89);
                  }
              }
              
      section
        p Contenu de <strong>/com/adelean/junit/jupiter/db.properties</strong>:
        font(size="-1")
          pre
            code.language-properties.
              db.user=hosuaby
              db.password=password
              db.url=localhost
        font(size="-1")
          pre
            code.language-java.
              @TestWithResources
              class InjectPropertiesResourcesTests {
              
                  @GivenPropertiesResource("/com/adelean/junit/jupiter/db.properties")
                  Properties dbProperties;
              
                  @Test
                  public void testInjectTextIntoStringInstanceField() {
                      assertThat(dbProperties)
                              .containsEntry("db.user", "hosuaby")
                              .containsEntry("db.password", "password")
                              .containsEntry("db.url", "localhost");
                  }
              }
              
      section
        h5 Injecter contenu JSON avec Jackson
        font(size="-1")
          pre
            code.language-java.
              @TestWithResources
              class TestsWithJackson {
              
                  @WithJacksonMapper
                  ObjectMapper objectMapper = new ObjectMapper()
                          .registerModule(new JavaTimeModule());
              
                  /* JSON */
                  @GivenJsonResource("/com/adelean/junit/jupiter/sponge-bob.json")
                  Map< String, Object > jsonAsMap;
              
                  @GivenJsonResource("/com/adelean/junit/jupiter/sponge-bob.json")
                  JsonNode jsonNode;
              
                  @GivenJsonResource("/com/adelean/junit/jupiter/sponge-bob.json")
                  Person spongeBob;
              
                  /* JSONL */
                  @GivenJsonLinesResource("/com/adelean/junit/jupiter/logs.jsonl")
                  Log[] logsAsArray;
              
                  @GivenJsonLinesResource("/com/adelean/junit/jupiter/logs.jsonl")
                  Collection< Log > logsAsCollection;
              }
              
      section
        h5 Example avec un test de A2
        font(size="-1")
          pre
            code.language-java.
              @TestWithResources
              class CatalogConfigTest {
              
                  @WithJacksonMapper
                  ObjectMapper objectMapper = JacksonUtils.objectMapper();
                  
                  @Test
                  void testGetUsedGlobalSynonyms(
                          @GivenJsonResource("com/adelean/a2/model/config/v2_frontal_648.config.json")
                          CatalogConfig catalogConfig) {
                      SynonymDictionary dictionary = catalogConfig.getAllSynonyms();
                      
                      assertTrue(dictionary.areSynonyms("rasage", "raser"));
                      assertTrue(dictionary.areSynonyms("raser", "rasage"));
                  }
              }
              
      section
        h5 Parseur partagé par plusiers classes des tests (héritage)
        font(size="-1")
          pre
            code.language-java.
              abstract class SuperClassWithParser {
              
                  @WithJacksonMapper
                  ObjectMapper objectMapper = new ObjectMapper()
                          .registerModule(new JavaTimeModule());
              }
              
              @TestWithResources
              class TestsSubclass1 extends SuperClassWithParser {
              
                  @GivenJsonLinesResource(from = "/com/adelean/junit/jupiter/logs.jsonl")
                  Collection< Log > logsAsCollection;
              }
              
              @TestWithResources
              class TestsSubclass2 extends SuperClassWithParser {
              
                  @GivenJsonResource("com/adelean/a2/model/config/v2_frontal_648.config.json")
                  CatalogConfig catalog648Config;
              }
              
      section
        h5 Parseur partagé par plusiers classes des tests (Tests Advice)
        font(size="-1")
          pre
            code.language-java.
              @TestsAdvice
              public final class GlobalObjectMapperProvider {
              
                  @WithJacksonMapper
                  public ObjectMapper globalObjectMapper() {
                      return JacksonUtils.objectMapper();
                  }
              }
              
      section
        h5 Parseurs nommés
        font(size="-1")
          pre
            code.language-java.
              @TestWithResources
              class TestsWithNamedParser {
              
                  @WithJacksonMapper("custom-mapper")
                  ObjectMapper objectMapper = new ObjectMapper()
                          .registerModule(new JavaTimeModule());
                  
                  @GivenJsonLinesResource(
                      from = "/com/adelean/junit/jupiter/logs.jsonl",
                      jacksonMapper = "custom-mapper")
                  Collection< Log > logsAsCollection;
              }
              
      section
        h5 Parsing des properties dans POJO avec <em>jackson-dataformat-properties</em>
        font(size="-2")
          pre
            code.language-java.
              class JavaDslTests {
                  JavaPropsSchema SCHEMA = JavaPropsSchema
                          .emptySchema()
                          .withoutPathSeparator();
                  ObjectReader READER = new JavaPropsMapper()
                          .readerFor(DbConnection.class)
                          .with(SCHEMA);
                  String PATH_PREFIX = "/com/adelean/junit/jupiter";
                  
                  static class DbConnection {
                      @JsonProperty("db.user") String user;
                      @JsonProperty("db.password") String password;
                      @JsonProperty("db.url") String url;
                  }
                  
                  @Test
                  public void testResourceAsStream() {
                      // @InjectResources Java DSL
                      var dbConnection = resource()
                              .withPath(PATH_PREFIX, "db.properties")
                              .asInputStream()
                              .parseChecked(READER::readValue);
              
                      assertThat(dbConnection)
                              .isNotNull()
                              .hasFieldOrPropertyWithValue("user", "hosuaby")
                              .hasFieldOrPropertyWithValue("password", "password")
                              .hasFieldOrPropertyWithValue("url", "localhost");
                  }
              }
              
      section
        h2 A venir:
        ul.build.build-items
          li Support XML (probablement JAX-B)
          li Support YAML avec SnakeYAML
          li Extension JUnit 4
          li Caching pour le resources parsés
      
      section
        h1 La fin :)
        h3 (Merci pour votre attention!)
        p P.S. N'oubliez pas à visiter:
        <a href="https://github.com/hosuaby/inject-resources">github.com/hosuaby/inject-resources</a>
        
    script(src='build/build.js')
